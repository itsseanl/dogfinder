import React, { useEffect, useState } from "react";
import logo from "./logo.svg";
import "./App.css";
import fetch from "isomorphic-unfetch";
import { existsTypeAnnotation } from "@babel/types";

function App() {
  const [breeds, setBreeds] = useState([]);
  const [selected, setSelected] = useState(null);
  const [images, setImages] = useState([]);
  const [collection, setCollection] = useState([]);
  const [viewCollection, setViewCollection] = useState(false);

  useEffect(() => {
    fetchImages();
  }, [selected]);

  const fetchImages = async () => {
    if (selected) {
      const request = await fetch(
        `https://dog.ceo/api/breed/${selected}/images`,
        {
          method: "GET",
          "Content-Type": "application/json"
        }
      );
      const response = await request.json();
      // console.log(response);
      setImages(response.message);
    }
  };

  useEffect(() => {
    fetchDogs();
  }, []);

  const fetchDogs = async () => {
    //try catch to handle error if fetch fails
    //fetch breed list
    const request = await fetch("https://dog.ceo/api/breeds/list/all", {
      method: "GET",
      "Content-Type": "application/json"
    });
    //retrieve resposne as JSON
    let breeds = await request.json();
    breeds = breeds.message;
    // console.log(breeds);
    let breedList = [];
    //map through each entry, ignoring sub-breeds
    Object.entries(breeds).map(entry => {
      breedList.push(entry[0]);
    });
    setBreeds(breedList);
  };

  const handleCollectionAdd = () => {
    let newCollection = [...collection];
    let exists = false;

    if (newCollection.length > 0) {
      newCollection.map(entry => {
        if (entry.selected.includes(selected)) {
          alert("Breed exists in collection!");
          return (exists = true);
        }
      });
    }
    if (exists == false) {
      newCollection.push({ selected: selected, image: images[0] });
      setCollection(newCollection);
    }
  };
  const handleCollectionRemove = remove => {
    let newCollection = [...collection];
    newCollection = newCollection.filter(entry => {
      console.log(typeof entry.selected);
      console.log(typeof remove);
      return entry.selected != remove;
    });
    setCollection(newCollection);
  };

  return (
    <>
      <div className="App">
        <header className="App-header">
          <h1>Authentise DogFinder</h1>
        </header>
        <div className="controls">
          <div className="search">
            <p>I'm looking for pictures of</p>
            <select onChange={e => setSelected(e.currentTarget.value)}>
              <option></option>
              {breeds &&
                breeds.map((breed, index) => {
                  return <option key={breed + index}>{breed}</option>;
                })}
            </select>
            <p>dogs!</p>
          </div>
          {selected && (
            <div className="add">
              <button onClick={handleCollectionAdd}>
                Add current selection to collection
              </button>
              {collection.length > 0 &&
                (viewCollection ? (
                  <button onClick={() => setViewCollection(false)}>
                    Hide Collection
                  </button>
                ) : (
                  <button onClick={() => setViewCollection(true)}>
                    View Collection
                  </button>
                ))}
            </div>
          )}
          {viewCollection && (
            <div className="collections">
              {collection.map(entry => {
                return (
                  <div className="collection">
                    <img src={entry.image} />
                    <p>{entry.selected}</p>
                    <button onClick={() => setSelected(entry.selected)}>
                      View
                    </button>
                    <button
                      onClick={() => handleCollectionRemove(entry.selected)}
                    >
                      Remove
                    </button>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        <div className="images">
          {images &&
            images.map((image, index) => {
              return (
                <div className="image">
                  <img key={image + index} src={image} />
                </div>
              );
            })}
        </div>
      </div>
      <style jsx>{`
        * {
          box-sizing: border-box;
        }

        .collections {
          height: auto;
          background: #fff;
          left: 0;
          right: 0;
          margin: auto;
          padding: 15px;
        }
        .collection {
          display: flex;
          justify-content: space-between;
          width: 100%;
          margin: 25px auto;
        }
        .collection img {
          height: 50px;
          width: 50px;
        }

        .controls {
          position: sticky;
          top: 0;
          background: #fff;
          padding: 15px;
        }
        .search {
          width: 100%;
          display: flex;
          justify-content: center;
          align-items: Center;
        }
        select {
          width: 200px;
          margin: 15px;
        }
        option {
          width: 100%;
        }

        img {
          object-fit: cover;
          height: 100%;
          width: 100%;
        }

        .images {
          max-width: 1200px;
          margin: 0 auto;
          display: grid;
          grid-gap: 1rem;
        }
        @media (min-width: 640px) {
          .images {
            grid-template-columns: repeat(2, 1fr);
          }
        }
        @media (min-width: 900px) {
          .images {
            grid-template-columns: repeat(3, 1fr);
          }
        }
      `}</style>
    </>
  );
}

export default App;
